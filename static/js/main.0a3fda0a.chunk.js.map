{"version":3,"sources":["controlledForm.js","App.js","reportWebVitals.js","index.js"],"names":["ControlledComponent","handleSubmit","e","a","preventDefault","Object","keys","state","filter","key","length","console","warn","log","handleChange","errors","target","value","name","setState","handleReset","phone","email","points","comments","onSubmit","type","this","onChange","style","color","placeholder","onClick","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a3fda0a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ControlledComponent extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: '',\r\n      phone: '',\r\n      email: '',\r\n      points: '',\r\n      comments: '',\r\n      errors: {\r\n        name: '',\r\n        phone: '',\r\n        email: '',\r\n        points: '',\r\n        comments: '',\r\n      },\r\n    };\r\n  }\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n     var errKeys = await Object.keys(this.state).filter((key) => {\r\n      if (this.state[key] == '' && this.state[key] != 'errors') {\r\n        return key;\r\n      }\r\n    });\r\n    if (errKeys.length >=1) console.warn('Please fill all fields');\r\n    else console.log(this.state);\r\n    // if(this.state[key] != \"errors\")\r\n    // {\r\n    //     console.log(this.state);\r\n    // }\r\n\r\n    \r\n  };\r\n\r\n  handleChange = async (e) => {\r\n    var errors = { ...this.state.errors };\r\n\r\n    if (e.target.value === '') {\r\n      errors[e.target.name] = 'Required';\r\n    } else {\r\n      errors[e.target.name] = '';\r\n    }\r\n\r\n    await  this.setState({ errors, [e.target.name]: e.target.value });\r\n\r\n  };\r\n  handleReset = () => {\r\n    this.setState({\r\n      name: '',\r\n      phone: '',\r\n      email: '',\r\n      points: '',\r\n      comments: '',\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <h3> Feedback Form </h3>\r\n          <form onSubmit={(e) => this.handleSubmit(e)}>\r\n            <div>\r\n              <label> Name </label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={this.state.name}\r\n                onChange={(e) => this.handleChange(e)}\r\n              />{' '}\r\n              <br />\r\n              <span style={{ color: 'red' }}>\r\n                {' '}\r\n                {this.state.errors.name}{' '}\r\n              </span>\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <label> Phone No </label>\r\n              <input\r\n                type=\"number\"\r\n                name=\"phone\"\r\n                value={this.state.phone}\r\n                onChange={(e) => this.handleChange(e)}\r\n              />\r\n              <br />\r\n              <span style={{ color: 'red' }}>\r\n                {' '}\r\n                {this.state.errors.phone}{' '}\r\n              </span>\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <label> Email </label>\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={this.state.email}\r\n                onChange={(e) => this.handleChange(e)}\r\n              />\r\n              <br />\r\n              <span style={{ color: 'red' }}> {this.state.errors.email} </span>\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <label> Points </label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"points\"\r\n                value=\"One\"\r\n                onChange={(e) => this.handleChange(e)}\r\n              />{' '}\r\n              1\r\n              <input\r\n                type=\"radio\"\r\n                name=\"points\"\r\n                value=\"Two\"\r\n                onChange={(e) => this.handleChange(e)}\r\n              />{' '}\r\n              2\r\n              <input\r\n                type=\"radio\"\r\n                name=\"points\"\r\n                value=\"THree\"\r\n                onChange={(e) => this.handleChange(e)}\r\n              />{' '}\r\n              3\r\n              <input\r\n                type=\"radio\"\r\n                name=\"points\"\r\n                value=\"Four\"\r\n                onChange={(e) => this.handleChange(e)}\r\n              />{' '}\r\n              4\r\n              <input\r\n                type=\"radio\"\r\n                name=\"points\"\r\n                value=\"Five\"\r\n                onChange={(e) => this.handleChange(e)}\r\n              />{' '}\r\n              5\r\n            </div>\r\n            <br />\r\n            <span style={{ color: 'red' }}> {this.state.errors.points} </span>\r\n            <div>\r\n              <br />\r\n              <label> Comments </label>\r\n           <textarea name=\"comments\" value={this.state.comments} onChange={(e) => this.handleChange(e)}\r\n                 placeholder=\"@Comments\" ></textarea>\r\n                  <br />\r\n            <span style={{ color: 'red' }}> {this.state.errors.comments} </span>\r\n            </div>\r\n            <br />\r\n            <button type=\"submit\"> Submit </button> &nbsp;\r\n            <button type=\"button\" onClick={this.handleReset}>\r\n              {' '}\r\n              Reset\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ControlledComponent;\r\n","\nimport './App.css';\nimport ControlledComponent from './controlledForm'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ControlledComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}